#!/usr/bin/env perl

=head1 NAME

  GrowBot

=head1 SYNOPSIS


=head1 DESCRIPTION


=head1 DEPENDENCIES

GrowBot requires Perl version 5.14 or later, in addition to Mojolicious.

=head1 FEEDBACK

=head2 Reporting Bugs

Report bugs to the GitHub issue tracker at:
  https://github.com/sandain/growbot/issues

=head1 AUTHOR - Jason M. Wood

Email sandain@hotmail.com

=head1 COPYRIGHT AND LICENSE

  Copyright (c) 2020-2022  Jason M. Wood <sandain@hotmail.com>

  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.

=cut

use strict;
use warnings;
use utf8;
use open qw (:std :utf8);
use v5.14;

use lib qw (lib);
use GrowBot;

use DateTime;
use Mojolicious::Lite;
use Mojo::JSON qw (to_json);

use lib qw (lib);

my $configFile = "config.json";
my $growbot = GrowBot->new ($configFile);


=head2 Helper Functions

=head3 config

  Return configuration information.

=cut

helper 'config' => sub {
  my $self = shift;
  return $growbot->{config};
};


=head3 data

  Return measurement data.

=cut

helper 'data' => sub {
  my $self = shift;
  my ($device, $measurement, $type, $indent) = @_;
  my $filepath = sprintf "%s/%s/%s.%s",
    $growbot->dataFolder, $device, $measurement, $type;
  return unless (-s $filepath);
  open my $fh, '<', $filepath or die "Can't load data: $!";
  my $data = join " " x $indent, <$fh>;
  close $fh;
  return $data;
};

=head3 devices

  Return the devices.

=cut

helper 'devices' => sub {
  my $self = shift;
  return sort $growbot->devices;
};

=head3 device

  Return device data.

=cut

helper 'device' => sub {
  my $self = shift;
  my ($name) = @_;
  my $folder = sprintf "%s/%s", $growbot->dataFolder, $name;
  my $data = {
    "name" => $name,
    "driver" => $self->config->{Devices}{$name}{Driver},
    "type" => $self->config->{Devices}{$name}{Type}
  };
  if (defined $self->config->{Devices}{$name}{Actions}{Measure}) {
    foreach my $m (keys %{$self->config->{Devices}{$name}{Actions}{Measure}}) {
      open my $fh, '<', "$folder/$m.txt" or
        die "Can't open file $folder/$m.txt: $!";
      my $measure = join "", <$fh>;
      close $fh;
      $measure =~ s/[\r\n]+//;
      my @measure = split /\t/, $measure;
      my $date;
      my $time;
      eval {
        my $dt = DateTime::Format::ISO8601->parse_datetime ($measure[0]);
        $dt->set_time_zone ($self->config->{TimeZone});
        $date = $dt->ymd;
        $time = $dt->hms;
      } or printf STDERR "Error: Unable to parse datetime '%s'.\n%s",
        $measure[0], $@;
      $data->{measurements}{$m} = {
        "type" => $self->config->{Devices}{$name}{Actions}{Measure}{$m}{Name},
        "date" => $date,
        "time" => $time,
        "measure" => $measure[1],
        "unit" => (defined $measure[2] ? $measure[2] : "")
      };
    }
  }
  return to_json $data;
};

=head2 HTTP Request Methods

=head3 get /

  Renders the dashboard.

=cut

get '/'
=> [ format => [ 'html' ] ]
=> { format => 'html' }
=> sub {
  my $self = shift;
  $self->res->headers->server ($growbot->{config}{AppName});
  $self->render (template => 'dashboard');
};

=head3 get /device/<device name>

  Renders the device.

=cut

get '/device/:name'
=> [ format => [ 'html', 'json' ] ]
=> { format => 'html' }
=> sub {
  my $self = shift;
  my $name = $self->param ('name');
  $self->res->headers->server ($growbot->{config}{AppName});
  $self->render (template => 'device');
};

=head3 get /device/<device name>/<action type>

  Renders the device action type.

=cut

get '/device/:name/:type'
=> [ format => [ 'html', 'svg', 'txt' ] ]
=> { format => 'html' }
=> sub {
  my $self = shift;
  my $name = $self->param ('name');
  my $type = $self->param ('type');
  $self->res->headers->server ($growbot->{config}{AppName});
  $self->render (template => 'device_type');
};

app->start;
